import mongoosePaginate from 'mongoose-paginate-v2';
import aggregatePaginate from 'mongoose-aggregate-paginate-v2';
import mongoose from 'mongoose';

interface PaginatedData<T> {
    data: T[];
    pagination: PaginationInfo;
}
interface PaginationInfo {
    totalItems: number;
    data: any[];
    perPage: number;
    currentPage: number;
    totalPages?: number;
}
type MongoosePaginateModel<T extends mongoose.Document> = mongoose.PaginateModel<T>;

declare const getPaginatedData: <T extends mongoose.Document<any, any, any>>(options: {
    model: MongoosePaginateModel<T>;
    page?: number;
    limit?: number;
    query?: any;
    populate?: string | object;
    select?: string | object;
    sort?: string | object;
}) => Promise<PaginatedData<T>>;
declare const getAggregatedPaginatedData: <T extends mongoose.Document<any, any, any>>(options: {
    model: any;
    page?: number;
    limit?: number;
    query?: any[];
}) => Promise<PaginatedData<T>>;
declare const mongoosePlugin: typeof mongoosePaginate;
declare const mongooseAggregatePlugin: typeof aggregatePaginate;

export { type MongoosePaginateModel, type PaginatedData, type PaginationInfo, getAggregatedPaginatedData, getPaginatedData, mongooseAggregatePlugin, mongoosePlugin };
