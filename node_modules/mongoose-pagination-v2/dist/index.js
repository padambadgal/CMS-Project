"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getAggregatedPaginatedData: () => getAggregatedPaginatedData,
  getPaginatedData: () => getPaginatedData,
  mongooseAggregatePlugin: () => mongooseAggregatePlugin,
  mongoosePlugin: () => mongoosePlugin
});
module.exports = __toCommonJS(src_exports);

// src/functions.ts
var import_mongoose_paginate_v2 = __toESM(require("mongoose-paginate-v2"));
var import_mongoose_aggregate_paginate_v2 = __toESM(require("mongoose-aggregate-paginate-v2"));
var getPaginatedData = async (options) => {
  const {
    model,
    page = 1,
    limit = 10,
    query = {},
    populate = "",
    select = "-password",
    sort = { createdAt: -1 }
  } = options;
  const mongooseOptions = {
    select,
    sort,
    populate,
    lean: true,
    page,
    limit,
    customLabels: {
      totalDocs: "totalItems",
      docs: "data",
      limit: "perPage",
      page: "currentPage",
      meta: "pagination"
    }
  };
  const { data, pagination } = await model.paginate(query, mongooseOptions);
  delete pagination?.pagingCounter;
  return { data, pagination };
};
var getAggregatedPaginatedData = async (options) => {
  const { model, page = 1, limit = 10, query = [] } = options;
  const pipelineOptions = {
    page,
    limit,
    customLabels: {
      totalDocs: "totalItems",
      docs: "data",
      limit: "perPage",
      page: "currentPage",
      meta: "pagination"
    }
  };
  const myAggregate = model.aggregate(query);
  const { data, pagination } = await model.aggregatePaginate(myAggregate, pipelineOptions);
  delete pagination?.pagingCounter;
  return { data, pagination };
};
var mongoosePlugin = import_mongoose_paginate_v2.default;
var mongooseAggregatePlugin = import_mongoose_aggregate_paginate_v2.default;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAggregatedPaginatedData,
  getPaginatedData,
  mongooseAggregatePlugin,
  mongoosePlugin
});
