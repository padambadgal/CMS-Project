// src/functions.ts
import mongoosePaginate from "mongoose-paginate-v2";
import aggregatePaginate from "mongoose-aggregate-paginate-v2";
var getPaginatedData = async (options) => {
  const {
    model,
    page = 1,
    limit = 10,
    query = {},
    populate = "",
    select = "-password",
    sort = { createdAt: -1 }
  } = options;
  const mongooseOptions = {
    select,
    sort,
    populate,
    lean: true,
    page,
    limit,
    customLabels: {
      totalDocs: "totalItems",
      docs: "data",
      limit: "perPage",
      page: "currentPage",
      meta: "pagination"
    }
  };
  const { data, pagination } = await model.paginate(query, mongooseOptions);
  delete pagination?.pagingCounter;
  return { data, pagination };
};
var getAggregatedPaginatedData = async (options) => {
  const { model, page = 1, limit = 10, query = [] } = options;
  const pipelineOptions = {
    page,
    limit,
    customLabels: {
      totalDocs: "totalItems",
      docs: "data",
      limit: "perPage",
      page: "currentPage",
      meta: "pagination"
    }
  };
  const myAggregate = model.aggregate(query);
  const { data, pagination } = await model.aggregatePaginate(myAggregate, pipelineOptions);
  delete pagination?.pagingCounter;
  return { data, pagination };
};
var mongoosePlugin = mongoosePaginate;
var mongooseAggregatePlugin = aggregatePaginate;
export {
  getAggregatedPaginatedData,
  getPaginatedData,
  mongooseAggregatePlugin,
  mongoosePlugin
};
